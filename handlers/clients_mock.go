// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package handlers

import (
	"context"
	"github.com/ONSdigital/dp-api-clients-go/site-search"
	"net/url"
	"sync"
)

var (
	lockRenderClientMockDo sync.RWMutex
)

// Ensure, that RenderClientMock does implement RenderClient.
// If this is not the case, regenerate this file with moq.
var _ RenderClient = &RenderClientMock{}

// RenderClientMock is a mock implementation of RenderClient.
//
//     func TestSomethingThatUsesRenderClient(t *testing.T) {
//
//         // make and configure a mocked RenderClient
//         mockedRenderClient := &RenderClientMock{
//             DoFunc: func(in1 string, in2 []byte) ([]byte, error) {
// 	               panic("mock out the Do method")
//             },
//         }
//
//         // use mockedRenderClient in code that requires RenderClient
//         // and then make assertions.
//
//     }
type RenderClientMock struct {
	// DoFunc mocks the Do method.
	DoFunc func(in1 string, in2 []byte) ([]byte, error)

	// calls tracks calls to the methods.
	calls struct {
		// Do holds details about calls to the Do method.
		Do []struct {
			// In1 is the in1 argument value.
			In1 string
			// In2 is the in2 argument value.
			In2 []byte
		}
	}
}

// Do calls DoFunc.
func (mock *RenderClientMock) Do(in1 string, in2 []byte) ([]byte, error) {
	if mock.DoFunc == nil {
		panic("RenderClientMock.DoFunc: method is nil but RenderClient.Do was just called")
	}
	callInfo := struct {
		In1 string
		In2 []byte
	}{
		In1: in1,
		In2: in2,
	}
	lockRenderClientMockDo.Lock()
	mock.calls.Do = append(mock.calls.Do, callInfo)
	lockRenderClientMockDo.Unlock()
	return mock.DoFunc(in1, in2)
}

// DoCalls gets all the calls that were made to Do.
// Check the length with:
//     len(mockedRenderClient.DoCalls())
func (mock *RenderClientMock) DoCalls() []struct {
	In1 string
	In2 []byte
} {
	var calls []struct {
		In1 string
		In2 []byte
	}
	lockRenderClientMockDo.RLock()
	calls = mock.calls.Do
	lockRenderClientMockDo.RUnlock()
	return calls
}

var (
	lockSearchClientMockGetDepartments sync.RWMutex
	lockSearchClientMockGetSearch      sync.RWMutex
)

// Ensure, that SearchClientMock does implement SearchClient.
// If this is not the case, regenerate this file with moq.
var _ SearchClient = &SearchClientMock{}

// SearchClientMock is a mock implementation of SearchClient.
//
//     func TestSomethingThatUsesSearchClient(t *testing.T) {
//
//         // make and configure a mocked SearchClient
//         mockedSearchClient := &SearchClientMock{
//             GetDepartmentsFunc: func(ctx context.Context, query url.Values) (search.Department, error) {
// 	               panic("mock out the GetDepartments method")
//             },
//             GetSearchFunc: func(ctx context.Context, query url.Values) (search.Response, error) {
// 	               panic("mock out the GetSearch method")
//             },
//         }
//
//         // use mockedSearchClient in code that requires SearchClient
//         // and then make assertions.
//
//     }
type SearchClientMock struct {
	// GetDepartmentsFunc mocks the GetDepartments method.
	GetDepartmentsFunc func(ctx context.Context, query url.Values) (search.Department, error)

	// GetSearchFunc mocks the GetSearch method.
	GetSearchFunc func(ctx context.Context, query url.Values) (search.Response, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetDepartments holds details about calls to the GetDepartments method.
		GetDepartments []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Query is the query argument value.
			Query url.Values
		}
		// GetSearch holds details about calls to the GetSearch method.
		GetSearch []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Query is the query argument value.
			Query url.Values
		}
	}
}

// GetDepartments calls GetDepartmentsFunc.
func (mock *SearchClientMock) GetDepartments(ctx context.Context, query url.Values) (search.Department, error) {
	if mock.GetDepartmentsFunc == nil {
		panic("SearchClientMock.GetDepartmentsFunc: method is nil but SearchClient.GetDepartments was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Query url.Values
	}{
		Ctx:   ctx,
		Query: query,
	}
	lockSearchClientMockGetDepartments.Lock()
	mock.calls.GetDepartments = append(mock.calls.GetDepartments, callInfo)
	lockSearchClientMockGetDepartments.Unlock()
	return mock.GetDepartmentsFunc(ctx, query)
}

// GetDepartmentsCalls gets all the calls that were made to GetDepartments.
// Check the length with:
//     len(mockedSearchClient.GetDepartmentsCalls())
func (mock *SearchClientMock) GetDepartmentsCalls() []struct {
	Ctx   context.Context
	Query url.Values
} {
	var calls []struct {
		Ctx   context.Context
		Query url.Values
	}
	lockSearchClientMockGetDepartments.RLock()
	calls = mock.calls.GetDepartments
	lockSearchClientMockGetDepartments.RUnlock()
	return calls
}

// GetSearch calls GetSearchFunc.
func (mock *SearchClientMock) GetSearch(ctx context.Context, query url.Values) (search.Response, error) {
	if mock.GetSearchFunc == nil {
		panic("SearchClientMock.GetSearchFunc: method is nil but SearchClient.GetSearch was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Query url.Values
	}{
		Ctx:   ctx,
		Query: query,
	}
	lockSearchClientMockGetSearch.Lock()
	mock.calls.GetSearch = append(mock.calls.GetSearch, callInfo)
	lockSearchClientMockGetSearch.Unlock()
	return mock.GetSearchFunc(ctx, query)
}

// GetSearchCalls gets all the calls that were made to GetSearch.
// Check the length with:
//     len(mockedSearchClient.GetSearchCalls())
func (mock *SearchClientMock) GetSearchCalls() []struct {
	Ctx   context.Context
	Query url.Values
} {
	var calls []struct {
		Ctx   context.Context
		Query url.Values
	}
	lockSearchClientMockGetSearch.RLock()
	calls = mock.calls.GetSearch
	lockSearchClientMockGetSearch.RUnlock()
	return calls
}
