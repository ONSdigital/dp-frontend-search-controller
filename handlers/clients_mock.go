// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package handlers

import (
	"context"
	zebedeeCli "github.com/ONSdigital/dp-api-clients-go/v2/zebedee"
	core "github.com/ONSdigital/dp-renderer/v2/model"
	searchAPI "github.com/ONSdigital/dp-search-api/api"
	searchModels "github.com/ONSdigital/dp-search-api/models"
	searchSDK "github.com/ONSdigital/dp-search-api/sdk"
	searchError "github.com/ONSdigital/dp-search-api/sdk/errors"
	topicModels "github.com/ONSdigital/dp-topic-api/models"
	topicSDK "github.com/ONSdigital/dp-topic-api/sdk"
	topicError "github.com/ONSdigital/dp-topic-api/sdk/errors"
	"io"
	"sync"
)

// Ensure, that RenderClientMock does implement RenderClient.
// If this is not the case, regenerate this file with moq.
var _ RenderClient = &RenderClientMock{}

// RenderClientMock is a mock implementation of RenderClient.
//
//	func TestSomethingThatUsesRenderClient(t *testing.T) {
//
//		// make and configure a mocked RenderClient
//		mockedRenderClient := &RenderClientMock{
//			BuildPageFunc: func(w io.Writer, pageModel interface{}, templateName string)  {
//				panic("mock out the BuildPage method")
//			},
//			NewBasePageModelFunc: func() core.Page {
//				panic("mock out the NewBasePageModel method")
//			},
//		}
//
//		// use mockedRenderClient in code that requires RenderClient
//		// and then make assertions.
//
//	}
type RenderClientMock struct {
	// BuildPageFunc mocks the BuildPage method.
	BuildPageFunc func(w io.Writer, pageModel interface{}, templateName string)

	// NewBasePageModelFunc mocks the NewBasePageModel method.
	NewBasePageModelFunc func() core.Page

	// calls tracks calls to the methods.
	calls struct {
		// BuildPage holds details about calls to the BuildPage method.
		BuildPage []struct {
			// W is the w argument value.
			W io.Writer
			// PageModel is the pageModel argument value.
			PageModel interface{}
			// TemplateName is the templateName argument value.
			TemplateName string
		}
		// NewBasePageModel holds details about calls to the NewBasePageModel method.
		NewBasePageModel []struct {
		}
	}
	lockBuildPage        sync.RWMutex
	lockNewBasePageModel sync.RWMutex
}

// BuildPage calls BuildPageFunc.
func (mock *RenderClientMock) BuildPage(w io.Writer, pageModel interface{}, templateName string) {
	if mock.BuildPageFunc == nil {
		panic("RenderClientMock.BuildPageFunc: method is nil but RenderClient.BuildPage was just called")
	}
	callInfo := struct {
		W            io.Writer
		PageModel    interface{}
		TemplateName string
	}{
		W:            w,
		PageModel:    pageModel,
		TemplateName: templateName,
	}
	mock.lockBuildPage.Lock()
	mock.calls.BuildPage = append(mock.calls.BuildPage, callInfo)
	mock.lockBuildPage.Unlock()
	mock.BuildPageFunc(w, pageModel, templateName)
}

// BuildPageCalls gets all the calls that were made to BuildPage.
// Check the length with:
//
//	len(mockedRenderClient.BuildPageCalls())
func (mock *RenderClientMock) BuildPageCalls() []struct {
	W            io.Writer
	PageModel    interface{}
	TemplateName string
} {
	var calls []struct {
		W            io.Writer
		PageModel    interface{}
		TemplateName string
	}
	mock.lockBuildPage.RLock()
	calls = mock.calls.BuildPage
	mock.lockBuildPage.RUnlock()
	return calls
}

// NewBasePageModel calls NewBasePageModelFunc.
func (mock *RenderClientMock) NewBasePageModel() core.Page {
	if mock.NewBasePageModelFunc == nil {
		panic("RenderClientMock.NewBasePageModelFunc: method is nil but RenderClient.NewBasePageModel was just called")
	}
	callInfo := struct {
	}{}
	mock.lockNewBasePageModel.Lock()
	mock.calls.NewBasePageModel = append(mock.calls.NewBasePageModel, callInfo)
	mock.lockNewBasePageModel.Unlock()
	return mock.NewBasePageModelFunc()
}

// NewBasePageModelCalls gets all the calls that were made to NewBasePageModel.
// Check the length with:
//
//	len(mockedRenderClient.NewBasePageModelCalls())
func (mock *RenderClientMock) NewBasePageModelCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockNewBasePageModel.RLock()
	calls = mock.calls.NewBasePageModel
	mock.lockNewBasePageModel.RUnlock()
	return calls
}

// Ensure, that SearchClientMock does implement SearchClient.
// If this is not the case, regenerate this file with moq.
var _ SearchClient = &SearchClientMock{}

// SearchClientMock is a mock implementation of SearchClient.
//
//	func TestSomethingThatUsesSearchClient(t *testing.T) {
//
//		// make and configure a mocked SearchClient
//		mockedSearchClient := &SearchClientMock{
//			GetSearchFunc: func(ctx context.Context, options searchSDK.Options) (*searchModels.SearchResponse, searchError.Error) {
//				panic("mock out the GetSearch method")
//			},
//			PostSearchURIsFunc: func(ctx context.Context, options searchSDK.Options, urisRequest searchAPI.URIsRequest) (*searchModels.SearchResponse, searchError.Error) {
//				panic("mock out the PostSearchURIs method")
//			},
//		}
//
//		// use mockedSearchClient in code that requires SearchClient
//		// and then make assertions.
//
//	}
type SearchClientMock struct {
	// GetSearchFunc mocks the GetSearch method.
	GetSearchFunc func(ctx context.Context, options searchSDK.Options) (*searchModels.SearchResponse, searchError.Error)

	// PostSearchURIsFunc mocks the PostSearchURIs method.
	PostSearchURIsFunc func(ctx context.Context, options searchSDK.Options, urisRequest searchAPI.URIsRequest) (*searchModels.SearchResponse, searchError.Error)

	// calls tracks calls to the methods.
	calls struct {
		// GetSearch holds details about calls to the GetSearch method.
		GetSearch []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Options is the options argument value.
			Options searchSDK.Options
		}
		// PostSearchURIs holds details about calls to the PostSearchURIs method.
		PostSearchURIs []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Options is the options argument value.
			Options searchSDK.Options
			// UrisRequest is the urisRequest argument value.
			UrisRequest searchAPI.URIsRequest
		}
	}
	lockGetSearch      sync.RWMutex
	lockPostSearchURIs sync.RWMutex
}

// GetSearch calls GetSearchFunc.
func (mock *SearchClientMock) GetSearch(ctx context.Context, options searchSDK.Options) (*searchModels.SearchResponse, searchError.Error) {
	if mock.GetSearchFunc == nil {
		panic("SearchClientMock.GetSearchFunc: method is nil but SearchClient.GetSearch was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Options searchSDK.Options
	}{
		Ctx:     ctx,
		Options: options,
	}
	mock.lockGetSearch.Lock()
	mock.calls.GetSearch = append(mock.calls.GetSearch, callInfo)
	mock.lockGetSearch.Unlock()
	return mock.GetSearchFunc(ctx, options)
}

// GetSearchCalls gets all the calls that were made to GetSearch.
// Check the length with:
//
//	len(mockedSearchClient.GetSearchCalls())
func (mock *SearchClientMock) GetSearchCalls() []struct {
	Ctx     context.Context
	Options searchSDK.Options
} {
	var calls []struct {
		Ctx     context.Context
		Options searchSDK.Options
	}
	mock.lockGetSearch.RLock()
	calls = mock.calls.GetSearch
	mock.lockGetSearch.RUnlock()
	return calls
}

// PostSearchURIs calls PostSearchURIsFunc.
func (mock *SearchClientMock) PostSearchURIs(ctx context.Context, options searchSDK.Options, urisRequest searchAPI.URIsRequest) (*searchModels.SearchResponse, searchError.Error) {
	if mock.PostSearchURIsFunc == nil {
		panic("SearchClientMock.PostSearchURIsFunc: method is nil but SearchClient.PostSearchURIs was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Options     searchSDK.Options
		UrisRequest searchAPI.URIsRequest
	}{
		Ctx:         ctx,
		Options:     options,
		UrisRequest: urisRequest,
	}
	mock.lockPostSearchURIs.Lock()
	mock.calls.PostSearchURIs = append(mock.calls.PostSearchURIs, callInfo)
	mock.lockPostSearchURIs.Unlock()
	return mock.PostSearchURIsFunc(ctx, options, urisRequest)
}

// PostSearchURIsCalls gets all the calls that were made to PostSearchURIs.
// Check the length with:
//
//	len(mockedSearchClient.PostSearchURIsCalls())
func (mock *SearchClientMock) PostSearchURIsCalls() []struct {
	Ctx         context.Context
	Options     searchSDK.Options
	UrisRequest searchAPI.URIsRequest
} {
	var calls []struct {
		Ctx         context.Context
		Options     searchSDK.Options
		UrisRequest searchAPI.URIsRequest
	}
	mock.lockPostSearchURIs.RLock()
	calls = mock.calls.PostSearchURIs
	mock.lockPostSearchURIs.RUnlock()
	return calls
}

// Ensure, that ZebedeeClientMock does implement ZebedeeClient.
// If this is not the case, regenerate this file with moq.
var _ ZebedeeClient = &ZebedeeClientMock{}

// ZebedeeClientMock is a mock implementation of ZebedeeClient.
//
//	func TestSomethingThatUsesZebedeeClient(t *testing.T) {
//
//		// make and configure a mocked ZebedeeClient
//		mockedZebedeeClient := &ZebedeeClientMock{
//			GetBreadcrumbFunc: func(ctx context.Context, userAccessToken string, collectionID string, lang string, uri string) ([]zebedeeCli.Breadcrumb, error) {
//				panic("mock out the GetBreadcrumb method")
//			},
//			GetHomepageContentFunc: func(ctx context.Context, userAuthToken string, collectionID string, lang string, path string) (zebedeeCli.HomepageContent, error) {
//				panic("mock out the GetHomepageContent method")
//			},
//			GetPageDataFunc: func(ctx context.Context, userAuthToken string, collectionID string, lang string, path string) (zebedeeCli.PageData, error) {
//				panic("mock out the GetPageData method")
//			},
//		}
//
//		// use mockedZebedeeClient in code that requires ZebedeeClient
//		// and then make assertions.
//
//	}
type ZebedeeClientMock struct {
	// GetBreadcrumbFunc mocks the GetBreadcrumb method.
	GetBreadcrumbFunc func(ctx context.Context, userAccessToken string, collectionID string, lang string, uri string) ([]zebedeeCli.Breadcrumb, error)

	// GetHomepageContentFunc mocks the GetHomepageContent method.
	GetHomepageContentFunc func(ctx context.Context, userAuthToken string, collectionID string, lang string, path string) (zebedeeCli.HomepageContent, error)

	// GetPageDataFunc mocks the GetPageData method.
	GetPageDataFunc func(ctx context.Context, userAuthToken string, collectionID string, lang string, path string) (zebedeeCli.PageData, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetBreadcrumb holds details about calls to the GetBreadcrumb method.
		GetBreadcrumb []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserAccessToken is the userAccessToken argument value.
			UserAccessToken string
			// CollectionID is the collectionID argument value.
			CollectionID string
			// Lang is the lang argument value.
			Lang string
			// URI is the uri argument value.
			URI string
		}
		// GetHomepageContent holds details about calls to the GetHomepageContent method.
		GetHomepageContent []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserAuthToken is the userAuthToken argument value.
			UserAuthToken string
			// CollectionID is the collectionID argument value.
			CollectionID string
			// Lang is the lang argument value.
			Lang string
			// Path is the path argument value.
			Path string
		}
		// GetPageData holds details about calls to the GetPageData method.
		GetPageData []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserAuthToken is the userAuthToken argument value.
			UserAuthToken string
			// CollectionID is the collectionID argument value.
			CollectionID string
			// Lang is the lang argument value.
			Lang string
			// Path is the path argument value.
			Path string
		}
	}
	lockGetBreadcrumb      sync.RWMutex
	lockGetHomepageContent sync.RWMutex
	lockGetPageData        sync.RWMutex
}

// GetBreadcrumb calls GetBreadcrumbFunc.
func (mock *ZebedeeClientMock) GetBreadcrumb(ctx context.Context, userAccessToken string, collectionID string, lang string, uri string) ([]zebedeeCli.Breadcrumb, error) {
	if mock.GetBreadcrumbFunc == nil {
		panic("ZebedeeClientMock.GetBreadcrumbFunc: method is nil but ZebedeeClient.GetBreadcrumb was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		UserAccessToken string
		CollectionID    string
		Lang            string
		URI             string
	}{
		Ctx:             ctx,
		UserAccessToken: userAccessToken,
		CollectionID:    collectionID,
		Lang:            lang,
		URI:             uri,
	}
	mock.lockGetBreadcrumb.Lock()
	mock.calls.GetBreadcrumb = append(mock.calls.GetBreadcrumb, callInfo)
	mock.lockGetBreadcrumb.Unlock()
	return mock.GetBreadcrumbFunc(ctx, userAccessToken, collectionID, lang, uri)
}

// GetBreadcrumbCalls gets all the calls that were made to GetBreadcrumb.
// Check the length with:
//
//	len(mockedZebedeeClient.GetBreadcrumbCalls())
func (mock *ZebedeeClientMock) GetBreadcrumbCalls() []struct {
	Ctx             context.Context
	UserAccessToken string
	CollectionID    string
	Lang            string
	URI             string
} {
	var calls []struct {
		Ctx             context.Context
		UserAccessToken string
		CollectionID    string
		Lang            string
		URI             string
	}
	mock.lockGetBreadcrumb.RLock()
	calls = mock.calls.GetBreadcrumb
	mock.lockGetBreadcrumb.RUnlock()
	return calls
}

// GetHomepageContent calls GetHomepageContentFunc.
func (mock *ZebedeeClientMock) GetHomepageContent(ctx context.Context, userAuthToken string, collectionID string, lang string, path string) (zebedeeCli.HomepageContent, error) {
	if mock.GetHomepageContentFunc == nil {
		panic("ZebedeeClientMock.GetHomepageContentFunc: method is nil but ZebedeeClient.GetHomepageContent was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		UserAuthToken string
		CollectionID  string
		Lang          string
		Path          string
	}{
		Ctx:           ctx,
		UserAuthToken: userAuthToken,
		CollectionID:  collectionID,
		Lang:          lang,
		Path:          path,
	}
	mock.lockGetHomepageContent.Lock()
	mock.calls.GetHomepageContent = append(mock.calls.GetHomepageContent, callInfo)
	mock.lockGetHomepageContent.Unlock()
	return mock.GetHomepageContentFunc(ctx, userAuthToken, collectionID, lang, path)
}

// GetHomepageContentCalls gets all the calls that were made to GetHomepageContent.
// Check the length with:
//
//	len(mockedZebedeeClient.GetHomepageContentCalls())
func (mock *ZebedeeClientMock) GetHomepageContentCalls() []struct {
	Ctx           context.Context
	UserAuthToken string
	CollectionID  string
	Lang          string
	Path          string
} {
	var calls []struct {
		Ctx           context.Context
		UserAuthToken string
		CollectionID  string
		Lang          string
		Path          string
	}
	mock.lockGetHomepageContent.RLock()
	calls = mock.calls.GetHomepageContent
	mock.lockGetHomepageContent.RUnlock()
	return calls
}

// GetPageData calls GetPageDataFunc.
func (mock *ZebedeeClientMock) GetPageData(ctx context.Context, userAuthToken string, collectionID string, lang string, path string) (zebedeeCli.PageData, error) {
	if mock.GetPageDataFunc == nil {
		panic("ZebedeeClientMock.GetPageDataFunc: method is nil but ZebedeeClient.GetPageData was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		UserAuthToken string
		CollectionID  string
		Lang          string
		Path          string
	}{
		Ctx:           ctx,
		UserAuthToken: userAuthToken,
		CollectionID:  collectionID,
		Lang:          lang,
		Path:          path,
	}
	mock.lockGetPageData.Lock()
	mock.calls.GetPageData = append(mock.calls.GetPageData, callInfo)
	mock.lockGetPageData.Unlock()
	return mock.GetPageDataFunc(ctx, userAuthToken, collectionID, lang, path)
}

// GetPageDataCalls gets all the calls that were made to GetPageData.
// Check the length with:
//
//	len(mockedZebedeeClient.GetPageDataCalls())
func (mock *ZebedeeClientMock) GetPageDataCalls() []struct {
	Ctx           context.Context
	UserAuthToken string
	CollectionID  string
	Lang          string
	Path          string
} {
	var calls []struct {
		Ctx           context.Context
		UserAuthToken string
		CollectionID  string
		Lang          string
		Path          string
	}
	mock.lockGetPageData.RLock()
	calls = mock.calls.GetPageData
	mock.lockGetPageData.RUnlock()
	return calls
}

// Ensure, that TopicClientMock does implement TopicClient.
// If this is not the case, regenerate this file with moq.
var _ TopicClient = &TopicClientMock{}

// TopicClientMock is a mock implementation of TopicClient.
//
//	func TestSomethingThatUsesTopicClient(t *testing.T) {
//
//		// make and configure a mocked TopicClient
//		mockedTopicClient := &TopicClientMock{
//			GetNavigationPublicFunc: func(ctx context.Context, reqHeaders topicSDK.Headers, options topicSDK.Options) (*topicModels.Navigation, topicError.Error) {
//				panic("mock out the GetNavigationPublic method")
//			},
//			GetRootTopicsPrivateFunc: func(ctx context.Context, reqHeaders topicSDK.Headers) (*topicModels.PrivateSubtopics, topicError.Error) {
//				panic("mock out the GetRootTopicsPrivate method")
//			},
//			GetRootTopicsPublicFunc: func(ctx context.Context, reqHeaders topicSDK.Headers) (*topicModels.PublicSubtopics, topicError.Error) {
//				panic("mock out the GetRootTopicsPublic method")
//			},
//			GetSubtopicsPrivateFunc: func(ctx context.Context, reqHeaders topicSDK.Headers, id string) (*topicModels.PrivateSubtopics, topicError.Error) {
//				panic("mock out the GetSubtopicsPrivate method")
//			},
//			GetSubtopicsPublicFunc: func(ctx context.Context, reqHeaders topicSDK.Headers, id string) (*topicModels.PublicSubtopics, topicError.Error) {
//				panic("mock out the GetSubtopicsPublic method")
//			},
//			GetTopicPrivateFunc: func(ctx context.Context, reqHeaders topicSDK.Headers, id string) (*topicModels.TopicResponse, topicError.Error) {
//				panic("mock out the GetTopicPrivate method")
//			},
//			GetTopicPublicFunc: func(ctx context.Context, reqHeaders topicSDK.Headers, id string) (*topicModels.Topic, topicError.Error) {
//				panic("mock out the GetTopicPublic method")
//			},
//		}
//
//		// use mockedTopicClient in code that requires TopicClient
//		// and then make assertions.
//
//	}
type TopicClientMock struct {
	// GetNavigationPublicFunc mocks the GetNavigationPublic method.
	GetNavigationPublicFunc func(ctx context.Context, reqHeaders topicSDK.Headers, options topicSDK.Options) (*topicModels.Navigation, topicError.Error)

	// GetRootTopicsPrivateFunc mocks the GetRootTopicsPrivate method.
	GetRootTopicsPrivateFunc func(ctx context.Context, reqHeaders topicSDK.Headers) (*topicModels.PrivateSubtopics, topicError.Error)

	// GetRootTopicsPublicFunc mocks the GetRootTopicsPublic method.
	GetRootTopicsPublicFunc func(ctx context.Context, reqHeaders topicSDK.Headers) (*topicModels.PublicSubtopics, topicError.Error)

	// GetSubtopicsPrivateFunc mocks the GetSubtopicsPrivate method.
	GetSubtopicsPrivateFunc func(ctx context.Context, reqHeaders topicSDK.Headers, id string) (*topicModels.PrivateSubtopics, topicError.Error)

	// GetSubtopicsPublicFunc mocks the GetSubtopicsPublic method.
	GetSubtopicsPublicFunc func(ctx context.Context, reqHeaders topicSDK.Headers, id string) (*topicModels.PublicSubtopics, topicError.Error)

	// GetTopicPrivateFunc mocks the GetTopicPrivate method.
	GetTopicPrivateFunc func(ctx context.Context, reqHeaders topicSDK.Headers, id string) (*topicModels.TopicResponse, topicError.Error)

	// GetTopicPublicFunc mocks the GetTopicPublic method.
	GetTopicPublicFunc func(ctx context.Context, reqHeaders topicSDK.Headers, id string) (*topicModels.Topic, topicError.Error)

	// calls tracks calls to the methods.
	calls struct {
		// GetNavigationPublic holds details about calls to the GetNavigationPublic method.
		GetNavigationPublic []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ReqHeaders is the reqHeaders argument value.
			ReqHeaders topicSDK.Headers
			// Options is the options argument value.
			Options topicSDK.Options
		}
		// GetRootTopicsPrivate holds details about calls to the GetRootTopicsPrivate method.
		GetRootTopicsPrivate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ReqHeaders is the reqHeaders argument value.
			ReqHeaders topicSDK.Headers
		}
		// GetRootTopicsPublic holds details about calls to the GetRootTopicsPublic method.
		GetRootTopicsPublic []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ReqHeaders is the reqHeaders argument value.
			ReqHeaders topicSDK.Headers
		}
		// GetSubtopicsPrivate holds details about calls to the GetSubtopicsPrivate method.
		GetSubtopicsPrivate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ReqHeaders is the reqHeaders argument value.
			ReqHeaders topicSDK.Headers
			// ID is the id argument value.
			ID string
		}
		// GetSubtopicsPublic holds details about calls to the GetSubtopicsPublic method.
		GetSubtopicsPublic []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ReqHeaders is the reqHeaders argument value.
			ReqHeaders topicSDK.Headers
			// ID is the id argument value.
			ID string
		}
		// GetTopicPrivate holds details about calls to the GetTopicPrivate method.
		GetTopicPrivate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ReqHeaders is the reqHeaders argument value.
			ReqHeaders topicSDK.Headers
			// ID is the id argument value.
			ID string
		}
		// GetTopicPublic holds details about calls to the GetTopicPublic method.
		GetTopicPublic []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ReqHeaders is the reqHeaders argument value.
			ReqHeaders topicSDK.Headers
			// ID is the id argument value.
			ID string
		}
	}
	lockGetNavigationPublic  sync.RWMutex
	lockGetRootTopicsPrivate sync.RWMutex
	lockGetRootTopicsPublic  sync.RWMutex
	lockGetSubtopicsPrivate  sync.RWMutex
	lockGetSubtopicsPublic   sync.RWMutex
	lockGetTopicPrivate      sync.RWMutex
	lockGetTopicPublic       sync.RWMutex
}

// GetNavigationPublic calls GetNavigationPublicFunc.
func (mock *TopicClientMock) GetNavigationPublic(ctx context.Context, reqHeaders topicSDK.Headers, options topicSDK.Options) (*topicModels.Navigation, topicError.Error) {
	if mock.GetNavigationPublicFunc == nil {
		panic("TopicClientMock.GetNavigationPublicFunc: method is nil but TopicClient.GetNavigationPublic was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		ReqHeaders topicSDK.Headers
		Options    topicSDK.Options
	}{
		Ctx:        ctx,
		ReqHeaders: reqHeaders,
		Options:    options,
	}
	mock.lockGetNavigationPublic.Lock()
	mock.calls.GetNavigationPublic = append(mock.calls.GetNavigationPublic, callInfo)
	mock.lockGetNavigationPublic.Unlock()
	return mock.GetNavigationPublicFunc(ctx, reqHeaders, options)
}

// GetNavigationPublicCalls gets all the calls that were made to GetNavigationPublic.
// Check the length with:
//
//	len(mockedTopicClient.GetNavigationPublicCalls())
func (mock *TopicClientMock) GetNavigationPublicCalls() []struct {
	Ctx        context.Context
	ReqHeaders topicSDK.Headers
	Options    topicSDK.Options
} {
	var calls []struct {
		Ctx        context.Context
		ReqHeaders topicSDK.Headers
		Options    topicSDK.Options
	}
	mock.lockGetNavigationPublic.RLock()
	calls = mock.calls.GetNavigationPublic
	mock.lockGetNavigationPublic.RUnlock()
	return calls
}

// GetRootTopicsPrivate calls GetRootTopicsPrivateFunc.
func (mock *TopicClientMock) GetRootTopicsPrivate(ctx context.Context, reqHeaders topicSDK.Headers) (*topicModels.PrivateSubtopics, topicError.Error) {
	if mock.GetRootTopicsPrivateFunc == nil {
		panic("TopicClientMock.GetRootTopicsPrivateFunc: method is nil but TopicClient.GetRootTopicsPrivate was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		ReqHeaders topicSDK.Headers
	}{
		Ctx:        ctx,
		ReqHeaders: reqHeaders,
	}
	mock.lockGetRootTopicsPrivate.Lock()
	mock.calls.GetRootTopicsPrivate = append(mock.calls.GetRootTopicsPrivate, callInfo)
	mock.lockGetRootTopicsPrivate.Unlock()
	return mock.GetRootTopicsPrivateFunc(ctx, reqHeaders)
}

// GetRootTopicsPrivateCalls gets all the calls that were made to GetRootTopicsPrivate.
// Check the length with:
//
//	len(mockedTopicClient.GetRootTopicsPrivateCalls())
func (mock *TopicClientMock) GetRootTopicsPrivateCalls() []struct {
	Ctx        context.Context
	ReqHeaders topicSDK.Headers
} {
	var calls []struct {
		Ctx        context.Context
		ReqHeaders topicSDK.Headers
	}
	mock.lockGetRootTopicsPrivate.RLock()
	calls = mock.calls.GetRootTopicsPrivate
	mock.lockGetRootTopicsPrivate.RUnlock()
	return calls
}

// GetRootTopicsPublic calls GetRootTopicsPublicFunc.
func (mock *TopicClientMock) GetRootTopicsPublic(ctx context.Context, reqHeaders topicSDK.Headers) (*topicModels.PublicSubtopics, topicError.Error) {
	if mock.GetRootTopicsPublicFunc == nil {
		panic("TopicClientMock.GetRootTopicsPublicFunc: method is nil but TopicClient.GetRootTopicsPublic was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		ReqHeaders topicSDK.Headers
	}{
		Ctx:        ctx,
		ReqHeaders: reqHeaders,
	}
	mock.lockGetRootTopicsPublic.Lock()
	mock.calls.GetRootTopicsPublic = append(mock.calls.GetRootTopicsPublic, callInfo)
	mock.lockGetRootTopicsPublic.Unlock()
	return mock.GetRootTopicsPublicFunc(ctx, reqHeaders)
}

// GetRootTopicsPublicCalls gets all the calls that were made to GetRootTopicsPublic.
// Check the length with:
//
//	len(mockedTopicClient.GetRootTopicsPublicCalls())
func (mock *TopicClientMock) GetRootTopicsPublicCalls() []struct {
	Ctx        context.Context
	ReqHeaders topicSDK.Headers
} {
	var calls []struct {
		Ctx        context.Context
		ReqHeaders topicSDK.Headers
	}
	mock.lockGetRootTopicsPublic.RLock()
	calls = mock.calls.GetRootTopicsPublic
	mock.lockGetRootTopicsPublic.RUnlock()
	return calls
}

// GetSubtopicsPrivate calls GetSubtopicsPrivateFunc.
func (mock *TopicClientMock) GetSubtopicsPrivate(ctx context.Context, reqHeaders topicSDK.Headers, id string) (*topicModels.PrivateSubtopics, topicError.Error) {
	if mock.GetSubtopicsPrivateFunc == nil {
		panic("TopicClientMock.GetSubtopicsPrivateFunc: method is nil but TopicClient.GetSubtopicsPrivate was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		ReqHeaders topicSDK.Headers
		ID         string
	}{
		Ctx:        ctx,
		ReqHeaders: reqHeaders,
		ID:         id,
	}
	mock.lockGetSubtopicsPrivate.Lock()
	mock.calls.GetSubtopicsPrivate = append(mock.calls.GetSubtopicsPrivate, callInfo)
	mock.lockGetSubtopicsPrivate.Unlock()
	return mock.GetSubtopicsPrivateFunc(ctx, reqHeaders, id)
}

// GetSubtopicsPrivateCalls gets all the calls that were made to GetSubtopicsPrivate.
// Check the length with:
//
//	len(mockedTopicClient.GetSubtopicsPrivateCalls())
func (mock *TopicClientMock) GetSubtopicsPrivateCalls() []struct {
	Ctx        context.Context
	ReqHeaders topicSDK.Headers
	ID         string
} {
	var calls []struct {
		Ctx        context.Context
		ReqHeaders topicSDK.Headers
		ID         string
	}
	mock.lockGetSubtopicsPrivate.RLock()
	calls = mock.calls.GetSubtopicsPrivate
	mock.lockGetSubtopicsPrivate.RUnlock()
	return calls
}

// GetSubtopicsPublic calls GetSubtopicsPublicFunc.
func (mock *TopicClientMock) GetSubtopicsPublic(ctx context.Context, reqHeaders topicSDK.Headers, id string) (*topicModels.PublicSubtopics, topicError.Error) {
	if mock.GetSubtopicsPublicFunc == nil {
		panic("TopicClientMock.GetSubtopicsPublicFunc: method is nil but TopicClient.GetSubtopicsPublic was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		ReqHeaders topicSDK.Headers
		ID         string
	}{
		Ctx:        ctx,
		ReqHeaders: reqHeaders,
		ID:         id,
	}
	mock.lockGetSubtopicsPublic.Lock()
	mock.calls.GetSubtopicsPublic = append(mock.calls.GetSubtopicsPublic, callInfo)
	mock.lockGetSubtopicsPublic.Unlock()
	return mock.GetSubtopicsPublicFunc(ctx, reqHeaders, id)
}

// GetSubtopicsPublicCalls gets all the calls that were made to GetSubtopicsPublic.
// Check the length with:
//
//	len(mockedTopicClient.GetSubtopicsPublicCalls())
func (mock *TopicClientMock) GetSubtopicsPublicCalls() []struct {
	Ctx        context.Context
	ReqHeaders topicSDK.Headers
	ID         string
} {
	var calls []struct {
		Ctx        context.Context
		ReqHeaders topicSDK.Headers
		ID         string
	}
	mock.lockGetSubtopicsPublic.RLock()
	calls = mock.calls.GetSubtopicsPublic
	mock.lockGetSubtopicsPublic.RUnlock()
	return calls
}

// GetTopicPrivate calls GetTopicPrivateFunc.
func (mock *TopicClientMock) GetTopicPrivate(ctx context.Context, reqHeaders topicSDK.Headers, id string) (*topicModels.TopicResponse, topicError.Error) {
	if mock.GetTopicPrivateFunc == nil {
		panic("TopicClientMock.GetTopicPrivateFunc: method is nil but TopicClient.GetTopicPrivate was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		ReqHeaders topicSDK.Headers
		ID         string
	}{
		Ctx:        ctx,
		ReqHeaders: reqHeaders,
		ID:         id,
	}
	mock.lockGetTopicPrivate.Lock()
	mock.calls.GetTopicPrivate = append(mock.calls.GetTopicPrivate, callInfo)
	mock.lockGetTopicPrivate.Unlock()
	return mock.GetTopicPrivateFunc(ctx, reqHeaders, id)
}

// GetTopicPrivateCalls gets all the calls that were made to GetTopicPrivate.
// Check the length with:
//
//	len(mockedTopicClient.GetTopicPrivateCalls())
func (mock *TopicClientMock) GetTopicPrivateCalls() []struct {
	Ctx        context.Context
	ReqHeaders topicSDK.Headers
	ID         string
} {
	var calls []struct {
		Ctx        context.Context
		ReqHeaders topicSDK.Headers
		ID         string
	}
	mock.lockGetTopicPrivate.RLock()
	calls = mock.calls.GetTopicPrivate
	mock.lockGetTopicPrivate.RUnlock()
	return calls
}

// GetTopicPublic calls GetTopicPublicFunc.
func (mock *TopicClientMock) GetTopicPublic(ctx context.Context, reqHeaders topicSDK.Headers, id string) (*topicModels.Topic, topicError.Error) {
	if mock.GetTopicPublicFunc == nil {
		panic("TopicClientMock.GetTopicPublicFunc: method is nil but TopicClient.GetTopicPublic was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		ReqHeaders topicSDK.Headers
		ID         string
	}{
		Ctx:        ctx,
		ReqHeaders: reqHeaders,
		ID:         id,
	}
	mock.lockGetTopicPublic.Lock()
	mock.calls.GetTopicPublic = append(mock.calls.GetTopicPublic, callInfo)
	mock.lockGetTopicPublic.Unlock()
	return mock.GetTopicPublicFunc(ctx, reqHeaders, id)
}

// GetTopicPublicCalls gets all the calls that were made to GetTopicPublic.
// Check the length with:
//
//	len(mockedTopicClient.GetTopicPublicCalls())
func (mock *TopicClientMock) GetTopicPublicCalls() []struct {
	Ctx        context.Context
	ReqHeaders topicSDK.Headers
	ID         string
} {
	var calls []struct {
		Ctx        context.Context
		ReqHeaders topicSDK.Headers
		ID         string
	}
	mock.lockGetTopicPublic.RLock()
	calls = mock.calls.GetTopicPublic
	mock.lockGetTopicPublic.RUnlock()
	return calls
}
