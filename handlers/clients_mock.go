// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package handlers

import (
	"context"
	"io"
	"sync"

	zebedeeCli "github.com/ONSdigital/dp-api-clients-go/v2/zebedee"
	coreModel "github.com/ONSdigital/dp-renderer/model"
	searchModels "github.com/ONSdigital/dp-search-api/models"
	searchSDK "github.com/ONSdigital/dp-search-api/sdk"
	apiError "github.com/ONSdigital/dp-search-api/sdk/errors"
)

// Ensure, that SearchClientMock does implement SearchClient.
// If this is not the case, regenerate this file with moq.
var _ SearchClient = &SearchClientMock{}

// SearchClientMock is a mock implementation of SearchClient.
//
//	func TestSomethingThatUsesSearchClient(t *testing.T) {
//
//		// make and configure a mocked SearchClient
//		mockedSearchClient := &SearchClientMock{
//			GetSearchFunc: func(ctx context.Context, options searchSDK.Options) (*searchModels.SearchResponse, apiError.Error) {
//				panic("mock out the GetSearch method")
//			},
//		}
//
//		// use mockedSearchClient in code that requires SearchClient
//		// and then make assertions.
//
//	}
type SearchClientMock struct {
	// GetSearchFunc mocks the GetSearch method.
	GetSearchFunc func(ctx context.Context, options searchSDK.Options) (*searchModels.SearchResponse, apiError.Error)

	// calls tracks calls to the methods.
	calls struct {
		// GetSearch holds details about calls to the GetSearch method.
		GetSearch []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Options is the options argument value.
			Options searchSDK.Options
		}
	}
	lockGetSearch sync.RWMutex
}

// GetSearch calls GetSearchFunc.
func (mock *SearchClientMock) GetSearch(ctx context.Context, options searchSDK.Options) (*searchModels.SearchResponse, apiError.Error) {
	if mock.GetSearchFunc == nil {
		panic("SearchClientMock.GetSearchFunc: method is nil but SearchClient.GetSearch was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Options searchSDK.Options
	}{
		Ctx:     ctx,
		Options: options,
	}
	mock.lockGetSearch.Lock()
	mock.calls.GetSearch = append(mock.calls.GetSearch, callInfo)
	mock.lockGetSearch.Unlock()
	return mock.GetSearchFunc(ctx, options)
}

// GetSearchCalls gets all the calls that were made to GetSearch.
// Check the length with:
//
//	len(mockedSearchClient.GetSearchCalls())
func (mock *SearchClientMock) GetSearchCalls() []struct {
	Ctx     context.Context
	Options searchSDK.Options
} {
	var calls []struct {
		Ctx     context.Context
		Options searchSDK.Options
	}
	mock.lockGetSearch.RLock()
	calls = mock.calls.GetSearch
	mock.lockGetSearch.RUnlock()
	return calls
}

// Ensure, that RenderClientMock does implement RenderClient.
// If this is not the case, regenerate this file with moq.
var _ RenderClient = &RenderClientMock{}

// RenderClientMock is a mock implementation of RenderClient.
//
//	func TestSomethingThatUsesRenderClient(t *testing.T) {
//
//		// make and configure a mocked RenderClient
//		mockedRenderClient := &RenderClientMock{
//			BuildPageFunc: func(w io.Writer, pageModel interface{}, templateName string)  {
//				panic("mock out the BuildPage method")
//			},
//			NewBasePageModelFunc: func() coreModel.Page {
//				panic("mock out the NewBasePageModel method")
//			},
//		}
//
//		// use mockedRenderClient in code that requires RenderClient
//		// and then make assertions.
//
//	}
type RenderClientMock struct {
	// BuildPageFunc mocks the BuildPage method.
	BuildPageFunc func(w io.Writer, pageModel interface{}, templateName string)

	// NewBasePageModelFunc mocks the NewBasePageModel method.
	NewBasePageModelFunc func() coreModel.Page

	// calls tracks calls to the methods.
	calls struct {
		// BuildPage holds details about calls to the BuildPage method.
		BuildPage []struct {
			// W is the w argument value.
			W io.Writer
			// PageModel is the pageModel argument value.
			PageModel interface{}
			// TemplateName is the templateName argument value.
			TemplateName string
		}
		// NewBasePageModel holds details about calls to the NewBasePageModel method.
		NewBasePageModel []struct {
		}
	}
	lockBuildPage        sync.RWMutex
	lockNewBasePageModel sync.RWMutex
}

// BuildPage calls BuildPageFunc.
func (mock *RenderClientMock) BuildPage(w io.Writer, pageModel interface{}, templateName string) {
	if mock.BuildPageFunc == nil {
		panic("RenderClientMock.BuildPageFunc: method is nil but RenderClient.BuildPage was just called")
	}
	callInfo := struct {
		W            io.Writer
		PageModel    interface{}
		TemplateName string
	}{
		W:            w,
		PageModel:    pageModel,
		TemplateName: templateName,
	}
	mock.lockBuildPage.Lock()
	mock.calls.BuildPage = append(mock.calls.BuildPage, callInfo)
	mock.lockBuildPage.Unlock()
	mock.BuildPageFunc(w, pageModel, templateName)
}

// BuildPageCalls gets all the calls that were made to BuildPage.
// Check the length with:
//
//	len(mockedRenderClient.BuildPageCalls())
func (mock *RenderClientMock) BuildPageCalls() []struct {
	W            io.Writer
	PageModel    interface{}
	TemplateName string
} {
	var calls []struct {
		W            io.Writer
		PageModel    interface{}
		TemplateName string
	}
	mock.lockBuildPage.RLock()
	calls = mock.calls.BuildPage
	mock.lockBuildPage.RUnlock()
	return calls
}

// NewBasePageModel calls NewBasePageModelFunc.
func (mock *RenderClientMock) NewBasePageModel() coreModel.Page {
	if mock.NewBasePageModelFunc == nil {
		panic("RenderClientMock.NewBasePageModelFunc: method is nil but RenderClient.NewBasePageModel was just called")
	}
	callInfo := struct {
	}{}
	mock.lockNewBasePageModel.Lock()
	mock.calls.NewBasePageModel = append(mock.calls.NewBasePageModel, callInfo)
	mock.lockNewBasePageModel.Unlock()
	return mock.NewBasePageModelFunc()
}

// NewBasePageModelCalls gets all the calls that were made to NewBasePageModel.
// Check the length with:
//
//	len(mockedRenderClient.NewBasePageModelCalls())
func (mock *RenderClientMock) NewBasePageModelCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockNewBasePageModel.RLock()
	calls = mock.calls.NewBasePageModel
	mock.lockNewBasePageModel.RUnlock()
	return calls
}

// Ensure, that ZebedeeClientMock does implement ZebedeeClient.
// If this is not the case, regenerate this file with moq.
var _ ZebedeeClient = &ZebedeeClientMock{}

// ZebedeeClientMock is a mock implementation of ZebedeeClient.
//
//	func TestSomethingThatUsesZebedeeClient(t *testing.T) {
//
//		// make and configure a mocked ZebedeeClient
//		mockedZebedeeClient := &ZebedeeClientMock{
//			GetHomepageContentFunc: func(ctx context.Context, userAuthToken string, collectionID string, lang string, path string) (zebedeeCli.HomepageContent, error) {
//				panic("mock out the GetHomepageContent method")
//			},
//		}
//
//		// use mockedZebedeeClient in code that requires ZebedeeClient
//		// and then make assertions.
//
//	}
type ZebedeeClientMock struct {
	// GetHomepageContentFunc mocks the GetHomepageContent method.
	GetHomepageContentFunc func(ctx context.Context, userAuthToken string, collectionID string, lang string, path string) (zebedeeCli.HomepageContent, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetHomepageContent holds details about calls to the GetHomepageContent method.
		GetHomepageContent []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserAuthToken is the userAuthToken argument value.
			UserAuthToken string
			// CollectionID is the collectionID argument value.
			CollectionID string
			// Lang is the lang argument value.
			Lang string
			// Path is the path argument value.
			Path string
		}
	}
	lockGetHomepageContent sync.RWMutex
}

// GetHomepageContent calls GetHomepageContentFunc.
func (mock *ZebedeeClientMock) GetHomepageContent(ctx context.Context, userAuthToken string, collectionID string, lang string, path string) (zebedeeCli.HomepageContent, error) {
	if mock.GetHomepageContentFunc == nil {
		panic("ZebedeeClientMock.GetHomepageContentFunc: method is nil but ZebedeeClient.GetHomepageContent was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		UserAuthToken string
		CollectionID  string
		Lang          string
		Path          string
	}{
		Ctx:           ctx,
		UserAuthToken: userAuthToken,
		CollectionID:  collectionID,
		Lang:          lang,
		Path:          path,
	}
	mock.lockGetHomepageContent.Lock()
	mock.calls.GetHomepageContent = append(mock.calls.GetHomepageContent, callInfo)
	mock.lockGetHomepageContent.Unlock()
	return mock.GetHomepageContentFunc(ctx, userAuthToken, collectionID, lang, path)
}

// GetHomepageContentCalls gets all the calls that were made to GetHomepageContent.
// Check the length with:
//
//	len(mockedZebedeeClient.GetHomepageContentCalls())
func (mock *ZebedeeClientMock) GetHomepageContentCalls() []struct {
	Ctx           context.Context
	UserAuthToken string
	CollectionID  string
	Lang          string
	Path          string
} {
	var calls []struct {
		Ctx           context.Context
		UserAuthToken string
		CollectionID  string
		Lang          string
		Path          string
	}
	mock.lockGetHomepageContent.RLock()
	calls = mock.calls.GetHomepageContent
	mock.lockGetHomepageContent.RUnlock()
	return calls
}
